generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  AVATAR
}

model Product {
  id           String        @id @default(uuid())
  name         String
  price        Float
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  transactions Transaction[]
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  amount    Int
  action    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Media {
  id        String    @id @default(uuid())
  url       String
  type      MediaType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  users     User[]

  @@map("medias")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  roleId       String        @map("role_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  role         Role          @relation(fields: [roleId], references: [id], onDelete: NoAction)
  sessions     Session[]
  avatar       Media?        @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  avatarId     String?
  balance      Float         @default(0)
  transactions Transaction[]

  @@index([email])
  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  refreshToken String   @map("refresh_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([refreshToken])
  @@map("sessions")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  title           String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  users           User[]

  @@index([name])
  @@map("roles")
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}
